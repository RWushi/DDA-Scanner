from Config import bot, dp, UserState, DB
from aiogram.types import Message, CallbackQuery
from Keyboards import schedule_kb
from datetime import datetime

class PostData:
    def __init__(self):
        self.posts = {}

    async def set_post_id(self, chat_id, post_id):
        self.posts[chat_id] = post_id

    async def get_post_id(self, chat_id):
        return self.posts.get(chat_id)

user_post_data = PostData()


async def schedule(chat_id, post_id):
    await bot.send_message(chat_id, text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç ‚Ññ{post_id}", reply_markup=schedule_kb)
    await user_post_data.set_post_id(chat_id, post_id)


@dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—éüí°", state=UserState.schedule)
async def instruction_schedule(message: Message):
    await bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 06.12.2023 09:00. –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞—Ç–æ–π")


@dp.message_handler(lambda message: message.text == "–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚úÖ", state=UserState.schedule)
async def current_schedule_start(message: Message):
    user_id = message.from_user.id
    post_id = await user_post_data.get_post_id(user_id)
    post_id = int(post_id)

    async with DB() as conn:
        query = "SELECT datetime FROM default_messages WHERE user_id = $1 AND post_id = $2"
        datetimes_records = await conn.fetch(query, user_id, post_id)

        if not datetimes_records:
            query = "SELECT datetime FROM media_groups WHERE user_id = $1 AND post_id = $2"
            datetimes_records = await conn.fetch(query, user_id, post_id)

        datetime_list = []
        for record in datetimes_records:
            if record['datetime'] is not None:
                for dt in record['datetime']:
                    datetime_list.append(dt.strftime("%d.%m.%Y %H:%M"))

        if not datetime_list:
            await bot.send_message(message.chat.id, "–î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            datetime_str = '\n'.join(datetime_list)
            await bot.send_message(message.chat.id, datetime_str)


@dp.callback_query_handler(text_startswith='schedule:', state=[UserState.schedule, UserState.autoposting])
async def schedule_start(callback_query: CallbackQuery):
    await UserState.schedule.set()
    user_id = callback_query.from_user.id
    post_id = callback_query.data.split(":", 1)[1]

    await schedule(user_id, post_id)


@dp.message_handler(state=UserState.schedule)
async def set_schedule(message: Message):
    user_id = message.from_user.id
    time_str = message.text
    post_id = await user_post_data.get_post_id(user_id)
    post_id = int(post_id)

    try:
        scheduled_datetime = datetime.strptime(time_str, '%d.%m.%Y %H:%M')
        current_datetime = datetime.now()

        if scheduled_datetime < current_datetime:
            await bot.send_message(user_id, "–í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ")
            return
    except ValueError:
        await bot.send_message(user_id, "–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")
        return

    async with DB() as conn:
        updated = await conn.execute(
            "UPDATE default_messages SET datetime = array_append(datetime, $1) WHERE user_id = $2 AND post_id = $3",
            scheduled_datetime, user_id, post_id
        )

        if updated == "UPDATE 0":
            await conn.execute(
                "UPDATE media_groups SET datetime = array_append(datetime, $1) WHERE user_id = $2 AND post_id = $3",
                scheduled_datetime, user_id, post_id
            )

    await bot.send_message(user_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {scheduled_datetime.strftime('%d.%m.%Y %H:%M')}")



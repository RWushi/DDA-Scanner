from aiogram.types import Message
from Config import dp, bot, UserState
from Keyboards import wait_links_kb
from JoinGroups import join_groups
import re, asyncio

async def wait_links(chat_id):
    await bot.send_message(chat_id, text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å", reply_markup = wait_links_kb)

@dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—éüí°", state=UserState.wait_links)
async def wait_links_start(message: Message):
    instruction = """
    –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
https://t.me/group1
https://t.me/group2
https://t.me/group3
https://t.me/group4
...
    """
    await bot.send_message(message.chat.id, instruction)

@dp.message_handler(lambda message: message.text.startswith("https://t.me/"), state=UserState.wait_links)
async def handle_groups_links(message: Message):
    links = re.findall(r'https://t\.me/\S+', message.text)
    num = len(links)

    if num == 0:
        await bot.send_message(message.from_user.id, "–°—Å—ã–ª–∫–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")
        return

    time = num * 3

    asyncio.create_task(join_groups(message.chat.id, links))
    await bot.send_message(message.from_user.id, f"–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—Å—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time} –º–∏–Ω—É—Ç(—ã|–∞)")